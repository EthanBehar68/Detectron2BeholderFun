# -*- coding: utf-8 -*-
"""Beholder Train and Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AFs_Jf_feU8hB-ZljvQV0q-_k4K3Phiw

# Beholder Instance Segmentation with COCO dataformat
<img src="https://dl.fbaipublicfiles.com/detectron2/Detectron2-Logo-Horz.png" width="500">

## Install detectron2
"""

# If you're running on a local machine, be sure to follow the installation instructions.
# https://github.com/facebookresearch/detectron2/blob/master/INSTALL.md
# This notebook includes only what's necessary to run in Colab.

# install dependencies: 
!pip install pyyaml==5.1 pycocotools>=2.0.1
import torch, torchvision
# install Detectron2
!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.6/index.html

"""## Get Beholder Dataset"""

!wget https://github.com/EthanBehar68/Detectron2BeholderFun/raw/master/BeholderImages.zip --max-redirect=2
!unzip BeholderImages.zip

"""## Register Beholder Dataset"""

import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog

from detectron2.data.datasets import register_coco_instances
register_coco_instances("beholder_train", {}, "./BeholderImages/trainval.json", "./BeholderImages/Train")

import random
from detectron2.data import DatasetCatalog, MetadataCatalog

beholderDatasetDicts = DatasetCatalog.get("beholder_train")
beholderMetadata = MetadataCatalog.get("beholder_train")

# Uncomment if you want to verify COCO data is loaded correctly

for data in random.sample(beholderDatasetDicts, 3):
    image = cv2.imread(data["file_name"])
    visualizer = Visualizer(image[:, :, ::-1], metadata=beholderMetadata, scale=0.5)
    visualizer = visualizer.draw_dataset_dict(data)
    plt.figure(figsize = (14, 10))
    plt.imshow(cv2.cvtColor(visualizer.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))
    plt.show()

"""## Train model"""

from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("beholder_train",)
cfg.DATASETS.TEST = ()
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.00025
cfg.SOLVER.MAX_ITER = 1000
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 4

# Uncomment if you want to train!

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg) 
trainer.resume_or_load(resume=False)
trainer.train()

"""## Use model for inference"""

cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5 
cfg.DATASETS.TEST = ("beholder_eval", )
predictor = DefaultPredictor(cfg)

from detectron2.utils.visualizer import ColorMode
beholderImages = [beholder for beholder in os.listdir('./BeholderImages/Eval') if beholder.endswith('.png')]
for fileName in beholderImages:    
    print('./BeholderImages/Eval' + fileName)
    image = cv2.imread('./BeholderImages/Eval/' + fileName)
    outputs = predictor(image)
    visualizer = Visualizer(image[:, :, ::-1],
                   metadata=beholderMetadata, 
                   scale=0.8, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels
    )
    visualizer = visualizer.draw_instance_predictions(outputs["instances"].to("cpu"))
    plt.figure(figsize = (14, 10))
    plt.imshow(cv2.cvtColor(visualizer.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))
    plt.show()